import globals from 'globals';
import pluginJs from '@eslint/js';
import tseslint from 'typescript-eslint';
import { fixupConfigRules } from '@eslint/compat';
import pluginReactConfig from 'eslint-plugin-react/configs/recommended.js';

export default [
    {
        files: ['**/*.{js,mjs,cjs,ts,jsx,tsx}'],
    },
    {
        ignores: ['dist/', 'eslint.config.mjs'],
    },
    {
        languageOptions: {
            parserOptions: {
                ecmaFeatures: {
                    jsx: true,
                },
                project: true,
            },
        },
    },
    {
        languageOptions: {
            globals: globals.browser,
        },
    },
    pluginJs.configs.recommended,
    ...tseslint.configs.strict,
    ...tseslint.configs.stylistic,
    ...fixupConfigRules(pluginReactConfig),
    {
        rules: {
            // Custom "@eslint/js" rules
            'array-callback-return': 'error',
            'no-await-in-loop': 'error',
            'no-duplicate-imports': 'error',
            'no-useless-assignment': 'error',
            'default-case': 'error',
            eqeqeq: 'error',
            'no-else-return': 'error',
            'no-implicit-coercion': 'error',
            'no-implicit-globals': 'error',
            'no-negated-condition': 'error',
            'no-nested-ternary': 'error',
            'no-param-reassign': 'error',
            'no-plusplus': 'error',
            'no-undef-init': 'error',
            'no-unneeded-ternary': 'error',
            'no-useless-computed-key': 'error',
            'no-useless-rename': 'error',
            'no-useless-return': 'error',
            'prefer-arrow-callback': 'error',
            'prefer-const': 'error',
            'prefer-object-has-own': 'error',
            'prefer-object-spread': 'error',
            'prefer-rest-params': 'error',
            'prefer-spread': 'error',
            'prefer-template': 'error',
            radix: 'error',
            'sort-imports': ['error', { ignoreDeclarationSort: true }],
            yoda: 'error',

            // Rules (both custom and from "@eslint/js" recommended config), disabled in favor of "typescript-eslint" rules
            'dot-notation': 'off',
            'no-array-constructor': 'off',
            'no-throw-literal': 'off',
            'no-use-before-define': 'off',
            'prefer-destructuring': 'off',
            'require-await': 'off',
            'no-loss-of-precision': 'off',
            'no-unused-vars': 'off',

            // Custom "typescript-eslint" rules
            '@typescript-eslint/await-thenable': 'error',
            '@typescript-eslint/consistent-indexed-object-style': 'error',
            '@typescript-eslint/dot-notation': 'error',
            '@typescript-eslint/no-array-constructor': 'error',
            '@typescript-eslint/no-duplicate-type-constituents': 'error',
            '@typescript-eslint/no-empty-object-type': 'error',
            '@typescript-eslint/no-floating-promises': 'error',
            '@typescript-eslint/no-for-in-array': 'error',
            '@typescript-eslint/no-invalid-void-type': 'error',
            '@typescript-eslint/no-loss-of-precision': 'error',
            '@typescript-eslint/no-misused-promises': 'error',
            '@typescript-eslint/no-mixed-enums': 'error',
            '@typescript-eslint/no-non-null-asserted-nullish-coalescing':
                'error',
            '@typescript-eslint/no-non-null-assertion': 'error',
            '@typescript-eslint/no-redundant-type-constituents': 'error',
            '@typescript-eslint/no-use-before-define': 'error',
            '@typescript-eslint/no-unnecessary-boolean-literal-compare':
                'error',
            '@typescript-eslint/no-unnecessary-condition': 'error',
            '@typescript-eslint/no-unnecessary-template-expression': 'error',
            '@typescript-eslint/no-unnecessary-type-arguments': 'error',
            '@typescript-eslint/no-unnecessary-type-assertion': 'error',
            '@typescript-eslint/no-unsafe-argument': 'error',
            '@typescript-eslint/no-unsafe-assignment': 'error',
            '@typescript-eslint/no-unsafe-call': 'error',
            '@typescript-eslint/no-unsafe-enum-comparison': 'error',
            '@typescript-eslint/no-unsafe-member-access': 'error',
            '@typescript-eslint/no-unsafe-return': 'error',
            '@typescript-eslint/no-unsafe-unary-minus': 'error',
            '@typescript-eslint/no-useless-empty-export': 'error',
            '@typescript-eslint/no-unused-vars': 'error',
            '@typescript-eslint/non-nullable-type-assertion-style': 'error',
            '@typescript-eslint/only-throw-error': 'error',
            '@typescript-eslint/prefer-destructuring': 'error',
            '@typescript-eslint/prefer-enum-initializers': 'error',
            '@typescript-eslint/prefer-find': 'error',
            '@typescript-eslint/prefer-includes': 'error',
            '@typescript-eslint/prefer-literal-enum-member': 'error',
            '@typescript-eslint/prefer-nullish-coalescing': 'error',
            '@typescript-eslint/prefer-optional-chain': 'error',
            '@typescript-eslint/prefer-reduce-type-parameter': 'error',
            '@typescript-eslint/prefer-string-starts-ends-with': 'error',
            '@typescript-eslint/promise-function-async': 'error',
            '@typescript-eslint/restrict-plus-operands': 'error',
            '@typescript-eslint/restrict-template-expressions': 'error',
            '@typescript-eslint/require-await': 'error',
            '@typescript-eslint/strict-boolean-expressions': 'error',
            '@typescript-eslint/switch-exhaustiveness-check': 'error',
            '@typescript-eslint/use-unknown-in-catch-callback-variable':
                'error',

            // Custom "eslint-plugin-react" rules
            'react/button-has-type': 'error',
            'react/checked-requires-onchange-or-readonly': 'error',
            'react/destructuring-assignment': 'error',
            'react/hook-use-state': 'error',
            'react/jsx-boolean-value': 'error',
            'react/jsx-closing-bracket-location': 'error',
            'react/jsx-closing-tag-location': 'error',
            'react/jsx-curly-brace-presence': 'error',
            'react/jsx-curly-spacing': 'error',
            'react/jsx-filename-extension': [
                'error',
                { extensions: ['.jsx', '.tsx'] },
            ],
            'react/jsx-fragments': 'error',
            'react/jsx-handler-names': 'error',
            'react/jsx-indent': ['error', 4],
            'react/jsx-key': 'error',
            'react/jsx-no-constructed-context-values': 'error',
            'react/jsx-no-useless-fragment': 'error',
            'react/jsx-props-no-spreading': ['error', { custom: 'ignore' }],
            'react/jsx-wrap-multilines': 'error',
            'react/no-access-state-in-setstate': 'error',
            'react/no-array-index-key': 'error',
            'react/no-invalid-html-attribute': 'error',
            'react/no-object-type-as-default-prop': 'error',
            'react/self-closing-comp': 'error',
            'react/style-prop-object': 'error',
            'react/react-in-jsx-scope': 'off', // We use new JSX transform
        },
    },
];
